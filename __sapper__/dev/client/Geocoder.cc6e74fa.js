import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, y as onMount, z as onDestroy, g as goto, A as globals, e as element, b as claim_element, f as children, j as detach_dev, m as attr_dev, n as add_location, B as toggle_class, o as insert_dev, p as append_dev, C as listen_dev, r as noop, D as binding_callbacks, E as createEventDispatcher, c as create_component, l as claim_component, q as mount_component, u as transition_in, w as transition_out, x as destroy_component, a as space, t as text, k as claim_space, h as claim_text, F as set_input_value, G as group_outros, H as check_outros, I as run_all } from './client.c41caa3e.js';

var config = {
    jawg: {
        acccess_token: "4cKtE4Rze1HrvxWa9a7mdolSk10lVThTFC8zadQYMIMxTjkpTeIDJAAmhReDGnCH"
    },
    mapbox: {
        apikey: "pk.eyJ1IjoiZnBhc3Nhbml0aSIsImEiOiIxNTg3MGRlZWQyNjVkZjExMGVlNWVjNDFjOWQyNzNiMiJ9.pYKDlO4v-SNiDz08G9ZZoQ",
        init: { /* default map location (center of the map, and zoom level) */
            zoom: 12,
            center: [2.347457,48.857627]
        },
        style: "https://api.jawg.io/styles/jawg-light.json?access-token=4cKtE4Rze1HrvxWa9a7mdolSk10lVThTFC8zadQYMIMxTjkpTeIDJAAmhReDGnCH",
        geocoder: { /* Narrow search results to the defined boundingbox to avoid to many noises */
            searchbbox: [2.108065, 50.896051, 2.608629, 51.132778],
            placeholder: "Chercher une adresse"
        },
    },
    store: {
        unique_ids: ['nom_de_la_societe', 'adresse_du_point_de_vente']
    },
    data: {
        baseurl: "https://fpassaniti.opendatasoft.com/api/v2/catalog/datasets/les-arbres/exports/geojson",
        query: "?select=*&where=%22PARIS+12E+ARRDT%22&rows=49999",
        clustering: false,
        categories: {
            "default": // mandatory, keep a default icon
                {
                    "slug": "default",
                    "color":
                        "#f5f5f5"
                },
            "Traiteur - restauration à emporter":
                {
                    "slug": "traiteur",
                    "color":
                        "#FDD98B"
                }
            ,
            "Primeur - fruits et légumes":
                {
                    "slug": "primeur",
                    "color":
                        "#1EA81A"
                }
            ,
            "Poissonnerie":
                {
                    "slug": "poissonnerie",
                    "color":
                        "#86B1FC"
                }
            ,
            "Livraisons":
                {
                    "slug": "truck",
                    "color":
                        "#364852"
                }
            ,
            "Boucherie - charcuterie":
                {
                    "slug": "boucherie_charcuterie",
                    "color":
                        "#CB3019"
                }
            ,
            "Crèmerie - fromagerie":
                {
                    "slug": "fromagerie",
                    "color":
                        "#FDDB00"
                }
            ,
            "Vins - bières - spiritueux":
                {
                    "slug": "vin",
                    "color":
                        "#F90126"
                }
            ,
            "Boulangerie - pâtisserie":
                {
                    "slug": "boulangerie_patisserie",
                    "color":
                        "#E2A76F"
                }
            ,
            "Drive":
                {
                    "slug": "truck",
                    "color":
                        "#364852"
                }
            ,
            "Épicerie":
                {
                    "slug": "epicerie",
                    "color":
                        "#FDD98B"
                }
            ,
            "Alimentation générale":
                {
                    "slug": "alimentation_generale",
                    "color":
                        "#E06000"
                }
            ,
            "Supermarché ou hypermarché":
                {
                    "slug": "supermarche",
                    "color":
                        "#364852"
                }
        }
    }
};

/* src/components/Geolocator.svelte generated by Svelte v3.30.1 */

const { console: console_1 } = globals;
const file = "src/components/Geolocator.svelte";

function create_fragment(ctx) {
	let button;
	let img;
	let img_src_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			img = claim_element(button_nodes, "IMG", { src: true, class: true });
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "/location.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "svelte-u9cz5x");
			add_location(img, file, 40, 2, 890);
			attr_dev(button, "class", "button is-dark svelte-u9cz5x");
			toggle_class(button, "spin", /*searching*/ ctx[2]);
			add_location(button, file, 34, 0, 778);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, img);
			/*button_binding*/ ctx[3](button);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*getPosition*/ ctx[0], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*searching*/ 4) {
				toggle_class(button, "spin", /*searching*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			/*button_binding*/ ctx[3](null);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Geolocator", slots, []);
	let cleaner = /([+-]?\d+[.]?\d{0,6})\d*/;
	let geolocator;
	let searching = false;

	const setGeo = p => {
		$$invalidate(2, searching = false);
		const url = new URL(window.location);
		let lat = cleaner.exec(p.coords.latitude)[1];
		let long = cleaner.exec(p.coords.longitude)[1];
		url.searchParams.set("coords", long + "," + lat);
		goto(url);
	};

	const settings = {
		enableHighAccuracy: true,
		timeout: 10000,
		maximumAge: Infinity
	};

	const getPosition = () => {
		if (!navigator || !navigator.geolocation) {
			return;
		}

		$$invalidate(2, searching = true);
		navigator.geolocation.getCurrentPosition(setGeo, console.error, settings);
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Geolocator> was created with unknown prop '${key}'`);
	});

	function button_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			geolocator = $$value;
			$$invalidate(1, geolocator);
		});
	}

	$$self.$capture_state = () => ({
		onMount,
		onDestroy,
		goto,
		cleaner,
		geolocator,
		searching,
		setGeo,
		settings,
		getPosition
	});

	$$self.$inject_state = $$props => {
		if ("cleaner" in $$props) cleaner = $$props.cleaner;
		if ("geolocator" in $$props) $$invalidate(1, geolocator = $$props.geolocator);
		if ("searching" in $$props) $$invalidate(2, searching = $$props.searching);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [getPosition, geolocator, searching, button_binding];
}

class Geolocator extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { getPosition: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Geolocator",
			options,
			id: create_fragment.name
		});
	}

	get getPosition() {
		return this.$$.ctx[0];
	}

	set getPosition(value) {
		throw new Error("<Geolocator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Geocoder.svelte generated by Svelte v3.30.1 */
const file$1 = "src/components/Geocoder.svelte";

// (104:2) {#if geolocator}
function create_if_block(ctx) {
	let div;
	let geolocator_1;
	let current;
	geolocator_1 = new Geolocator({ $$inline: true });
	geolocator_1.$on("geolocate", setCoords);

	const block = {
		c: function create() {
			div = element("div");
			create_component(geolocator_1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(geolocator_1.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "control");
			add_location(div, file$1, 104, 4, 3263);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(geolocator_1, div, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(geolocator_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(geolocator_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(geolocator_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(104:2) {#if geolocator}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div1;
	let div0;
	let input;
	let t0;
	let span;
	let t1;
	let t2;
	let div1_id_value;
	let current;
	let mounted;
	let dispose;
	let if_block = /*geolocator*/ ctx[0] && create_if_block(ctx);

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			input = element("input");
			t0 = space();
			span = element("span");
			t1 = text("Votre position");
			t2 = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { id: true, class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			input = claim_element(div0_nodes, "INPUT", {
				id: true,
				class: true,
				type: true,
				autocomplete: true,
				name: true
			});

			t0 = claim_space(div0_nodes);
			span = claim_element(div0_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t1 = claim_text(span_nodes, "Votre position");
			span_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(div1_nodes);
			if (if_block) if_block.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "id", /*id*/ ctx[1]);
			attr_dev(input, "class", "input");
			attr_dev(input, "type", "text");
			attr_dev(input, "autocomplete", "off");
			attr_dev(input, "name", "coords");
			add_location(input, file$1, 92, 4, 3017);
			attr_dev(span, "class", "tag is-light");
			add_location(span, file$1, 101, 4, 3182);
			attr_dev(div0, "class", "control is-expanded has-icon-left");
			add_location(div0, file$1, 91, 2, 2965);
			attr_dev(div1, "id", div1_id_value = "search-container-" + /*id*/ ctx[1]);
			attr_dev(div1, "class", "field jawg-geocoder");
			toggle_class(div1, "has-addons", /*geolocator*/ ctx[0]);
			add_location(div1, file$1, 90, 0, 2872);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, input);
			set_input_value(input, /*query*/ ctx[2]);
			append_dev(div0, t0);
			append_dev(div0, span);
			append_dev(span, t1);
			append_dev(div1, t2);
			if (if_block) if_block.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(input, "focus", /*focusInput*/ ctx[3], false, false, false),
					listen_dev(input, "input", /*input_input_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*id*/ 2) {
				attr_dev(input, "id", /*id*/ ctx[1]);
			}

			if (dirty & /*query*/ 4 && input.value !== /*query*/ ctx[2]) {
				set_input_value(input, /*query*/ ctx[2]);
			}

			if (/*geolocator*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*geolocator*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div1, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty & /*id*/ 2 && div1_id_value !== (div1_id_value = "search-container-" + /*id*/ ctx[1])) {
				attr_dev(div1, "id", div1_id_value);
			}

			if (dirty & /*geolocator*/ 1) {
				toggle_class(div1, "has-addons", /*geolocator*/ ctx[0]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Geocoder", slots, []);
	const dispatch = createEventDispatcher();
	let { geolocator = false } = $$props;
	let { id = "searchbox" } = $$props;
	let { placeholder = "Search a place" } = $$props;
	let { center = { lat: 48.866667, lng: 2.333333 } } = $$props;
	let query;

	const focusInput = () => {
		if (query) {
			document.execCommand("selectAll");
		}
	};

	onMount(async () => {
		const autoCompleteModule = await Promise.all([import('./autoComplete.min.86378da8.js'), ]).then(function(x) { return x[0]; }).then(function (n) { return n.a; });
		const autoComplete = autoCompleteModule.default;

		const ac = new autoComplete({
				data: {
					src: async () => {
						const { lat, lng } = center;
						const token = config.jawg.acccess_token;
						const searchquery = query;
						const source = await fetch(`https://api.jawg.io/places/v1/autocomplete?size=10&text=${searchquery}&focus.point.lat=${lat}&focus.point.lon=${lng}&boundary.country=FR&access-token=${token}`);
						const data = await source.json();

						const ret = data.features.reduce(
							(acc, val) => {
								val.properties["geometry"] = val.geometry;
								return [...acc, val.properties];
							},
							[]
						);

						return ret;
					},
					key: ["label"],
					cache: false
				},
				placeHolder: placeholder,
				selector: "#" + id,
				threshold: 2,
				debounce: 200,
				trigger: ["input", "focus"],
				searchEngine: (query, record) => {
					return record;
				},
				sort: (firstResult, secondResult) => {
					if (firstResult.value.distance < secondResult.value.distance) return -1;
					if (firstResult.value.distance > secondResult.value.distance) return 1;
					return 0;
				},
				resultsList: {
					render: true,
					destination: `#search-container-${id}`,
					position: "beforeend",
					element: "ul"
				},
				maxResults: 10,
				highlight: true,
				resultItem: {
					content: (data, source) => {
						source.innerHTML = data.label;
					},
					element: "li"
				},
				noResults: (dataFeedback, generateList) => {
					generateList(ac, dataFeedback, dataFeedback.results);
					const result = document.createElement("li");
					result.setAttribute("class", "no_result");
					result.setAttribute("tabindex", "1");
					result.innerHTML = `<span>Found No Results for "${dataFeedback.query}"</span>`;
					document.querySelector(`#${ac.resultsList.idName}`).appendChild(result);
				},
				onSelection: feedback => {
					const coords = feedback.selection.value.geometry.coordinates;
					$$invalidate(2, query = feedback.selection.value.label);
					dispatch("geocode", { coords });
				}
			});
	});

	const writable_props = ["geolocator", "id", "placeholder", "center"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Geocoder> was created with unknown prop '${key}'`);
	});

	function input_input_handler() {
		query = this.value;
		$$invalidate(2, query);
	}

	$$self.$$set = $$props => {
		if ("geolocator" in $$props) $$invalidate(0, geolocator = $$props.geolocator);
		if ("id" in $$props) $$invalidate(1, id = $$props.id);
		if ("placeholder" in $$props) $$invalidate(4, placeholder = $$props.placeholder);
		if ("center" in $$props) $$invalidate(5, center = $$props.center);
	};

	$$self.$capture_state = () => ({
		onMount,
		createEventDispatcher,
		config,
		Geolocator,
		dispatch,
		geolocator,
		id,
		placeholder,
		center,
		query,
		focusInput
	});

	$$self.$inject_state = $$props => {
		if ("geolocator" in $$props) $$invalidate(0, geolocator = $$props.geolocator);
		if ("id" in $$props) $$invalidate(1, id = $$props.id);
		if ("placeholder" in $$props) $$invalidate(4, placeholder = $$props.placeholder);
		if ("center" in $$props) $$invalidate(5, center = $$props.center);
		if ("query" in $$props) $$invalidate(2, query = $$props.query);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [geolocator, id, query, focusInput, placeholder, center, input_input_handler];
}

class Geocoder extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			geolocator: 0,
			id: 1,
			placeholder: 4,
			center: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Geocoder",
			options,
			id: create_fragment$1.name
		});
	}

	get geolocator() {
		throw new Error("<Geocoder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set geolocator(value) {
		throw new Error("<Geocoder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Geocoder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Geocoder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get placeholder() {
		throw new Error("<Geocoder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set placeholder(value) {
		throw new Error("<Geocoder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get center() {
		throw new Error("<Geocoder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set center(value) {
		throw new Error("<Geocoder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Geocoder as G, Geolocator as a, config as c };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
